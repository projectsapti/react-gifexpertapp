{"version":3,"sources":["components/AddCategory.js","helpers/getGif.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","cate","value","onChange","target","type","getGIf","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAEaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAC5B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAYA,OACE,uBAAMC,SAPa,SAACC,GACpBA,EAAEC,iBACFN,GAAc,SAACO,GAAD,OAAWL,GAAX,mBAAyBK,OACvCJ,EAAc,KAId,UACE,6BAAKD,IACL,uBAAOM,MAAON,EAAYO,SAbJ,SAACJ,GACzBF,EAAcE,EAAEK,OAAOF,QAYkCG,KAAK,a,+BCjBrDC,EAAM,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACZC,EADY,0FAEoEC,UAAUH,GAF9E,sBAGCI,MAAMF,GAHP,cAGZG,EAHY,gBAIKA,EAAKC,OAJV,uBAIVC,EAJU,EAIVA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GACrB,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QATnB,kBAYXM,GAZW,4CAAH,sDCCJ,SAASO,EAAT,GAAqC,EAAfJ,GAAgB,IAAbC,EAAY,EAAZA,MAAMV,EAAM,EAANA,IAE1C,OACI,sBAAKc,UAAU,OAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,OCFC,SAASO,EAAT,GAAgC,IAAbnB,EAAY,EAAZA,SAChC,ECHK,SAAsBA,GAC3B,MAA0BZ,mBAAS,CACjCmB,KAAM,GACNa,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAgBA,OAXAC,qBAAU,WACRxB,EAAOC,GAAUwB,MAAK,SAACC,GACrBC,YAAW,WACTJ,EAAS,CACPf,KAAMkB,EACNL,SAAS,MAEV,UAEJ,CAACpB,IAEGqB,EDd2BM,CAAa3B,GAAjCa,EAAd,EAAQN,KAAca,EAAtB,EAAsBA,QAEtB,OACE,qCACE,6BAAKpB,IACJoB,GAAW,WACZ,qBAAKJ,UAAU,8CAAf,SACGH,EAAOJ,KAAI,SAACC,GAAD,OACV,cAACK,EAAD,eAA8BL,GAAZA,EAAIC,YEVhC,IAmBeiB,EAnBM,WAEnB,MAAoCxC,mBAAS,IAA7C,mBAAOyC,EAAP,KAAmB1C,EAAnB,KAEA,OACE,qCACE,gDACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BACG0C,EAAWpB,KAAI,SAACT,GACf,OAAO,cAACmB,EAAD,CAAwBnB,SAAUA,GAApBA,Y,MCX/B8B,IAASC,OACP,cAAE,EAAF,IACAC,SAASC,eAAe,W","file":"static/js/main.c2b16963.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n  const [inputValue, setinputValue] = useState('');\r\n\r\n  const handleInputchange = (e) => {\r\n    setinputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    setCategories((cate) => [inputValue,...cate]);\r\n    setinputValue('');\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <h1>{inputValue}</h1>\r\n      <input value={inputValue} onChange={handleInputchange} type=\"text\" />\r\n    </form>\r\n  );\r\n};\r\n","//funcion para obtener imagenes\r\nexport const getGIf = async (category) => {\r\n    const url =\r\n      `https://api.giphy.com/v1/gifs/search?api_key=FRmSiHk3Y8elwxNyjLkJOmeQDsuHL3r0&q=${ encodeURI(category)}&limit=10`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n    const gifs = data.map((img) => {\r\n      return {\r\n        id: img.id,\r\n        title: img.title,\r\n        url: img.images.downsized_medium.url,\r\n      };\r\n    });\r\n    return gifs;\r\n  };\r\n","import React from 'react'\r\n\r\nexport default function GifGridItem({id,title,url}) {\r\n    \r\n    return (\r\n        <div className=\"card\">\r\n          <img src={url} alt={title} />  \r\n          <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\n//import { getGIf } from \"../helpers/getGif\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport GifGridItem from \"./GifGridItem\";\r\n\r\nexport default function GifGrid({ category }) {\r\n  const { data: images, loading } = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      <h3>{category}</h3>\r\n      {loading && \"Cargando\"}\r\n      <div className=\"card-grid animate__animated animate__bounce\">\r\n        {images.map((img) => (\r\n          <GifGridItem key={img.id} {...img} />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGIf } from \"../helpers/getGif\";\r\n\r\nexport function useFetchGifs(category) {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGIf(category).then((imgs) => {\r\n      setTimeout(() => {\r\n        setState({\r\n          data: imgs,\r\n          loading: false,\r\n        });\r\n      }, 3000);\r\n    });\r\n  }, [category]);\r\n\r\n  return state;\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport GifGrid from \"./components/GifGrid\";\r\n\r\nconst GifExpertApp = () => {\r\n  //categories\r\n  const [categories, setCategories] = useState([]);\r\n\r\n  return (\r\n    <>\r\n      <h2>GIF EXPERT APP</h2>\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr />\r\n\r\n      <ol>\r\n        {categories.map((category) => {\r\n          return <GifGrid key={category} category={category} />;\r\n        })}\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifExpertApp;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GifExpertApp from \"./GifExpertApp\";\nimport \"./index.css\";\n\nReactDOM.render(\n  < GifExpertApp />,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}